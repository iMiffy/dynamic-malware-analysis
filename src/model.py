from tensorflow.keras.models import Model
from tensorflow.keras.layers import Activation, Input, Conv1D, GlobalMaxPooling1D, Multiply, Dense, Dropout, Concatenate, BatchNormalization, LSTM, Bidirectional

class MalwareModel():

    def __init__(self, input_shape=(1000, 102)):
        self.input_shape = input_shape

    def gated_cnn(self, input_lay, filter_no, kernel_size):
        processed = Conv1D(filter_no, kernel_size)(input_lay)

        processed2 = Conv1D(filter_no, kernel_size)(input_lay)
        sigmoid_apply = Activation('sigmoid')(processed2)
        combined = Multiply()([processed, sigmoid_apply])
        return combined

    def create(self):
        inputs = Input(shape=self.input_shape)
        x = BatchNormalization()(inputs)
        gated_1_lay = self.gated_cnn(x, 128, 2)
        gated_2_lay = self.gated_cnn(x, 128, 3)
        combined = Concatenate(axis=1)([gated_1_lay, gated_2_lay])

        combined = BatchNormalization()(combined)
        combined = Bidirectional(LSTM(100, return_sequences=True))(combined)
        combined = GlobalMaxPooling1D()(combined)
        combined = Dense(64, activation='relu')(combined)
        combined = Dropout(0.5)(combined)
        predictions = Dense(1, activation='sigmoid')(combined)

        model = Model(inputs, predictions)
        model.compile(loss='binary_crossentropy', optimizer='adam',
                      metrics=['accuracy'])

        return model


