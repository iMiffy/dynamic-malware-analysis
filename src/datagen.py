import keras
import numpy as np

class DataGenerator(keras.utils.Sequence):

    def __init__(self, file_list,test=False, batch_size= 10, shuffle=False):
        """Constructor can be expanded,
           with batch size, dimentation etc.
        """
        self.file_list = list(file_list)
        self.test=test
        self.batch_size = batch_size
        self.shuffle = shuffle
        self.on_epoch_end()

    def __len__(self):
        # Take all batches in each iteration
        return int(np.floor(len(self.file_list) / self.batch_size))

    def __getitem__(self, index):
        # Generate indexes of the batch
        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]

        # single file
        file_list_temp = [self.file_list[k] for k in indexes]

        # Set of X_train and y_train
        X, y = self.__data_generation(file_list_temp)

        if self.test:
            return X

        return X, y

    def on_epoch_end(self):
        # Updates indexes after each epoch
        self.indexes = np.arange(len(self.file_list))
        if self.shuffle == True:
            np.random.shuffle(self.indexes)

    def __data_generation(self, file_list_temp):

        x_data=[]
        y_data=[]
        for file_path in file_list_temp:
            # Store sample
            data = np.load(file_path)

            if data.shape[0]<1000:
                pad_size=1000 - data.shape[0]
                pad_array = np.zeros((pad_size,102))
                data = np.concatenate([data,pad_array],axis=0)
            x_data.append(data)

            # Store class
            index =int(file_path.split('\\')[-1].split('.')[0])

            y = data_train["Label"][index]

            y_data.append(y)
        x_data = np.stack(x_data, axis = 0)
        y_data = np.array(y_data)

        return x_data, y_data
